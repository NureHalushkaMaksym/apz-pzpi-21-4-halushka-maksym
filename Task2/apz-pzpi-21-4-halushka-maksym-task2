Вступ:  
Метою даної лабораторної роботи є розробка серверної частини для програмної системи для аналізу зон збуту їжі.
 
Хід роботи: 
Опис архітектури системи;  
Загальна архітектура системи;  
Структура бази даних;  
Будова серверних компонентів системи, специфікація REST, методи взаємодії компонентів.  
 
 
 
 
 
 
 
 
 
 
 







1  МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ 
Користувачами розробленої системи є 2 типи акторів: клієнт та адміністратор.  
Основними потребами клієнта є:  
−  показ даних про продажі
− аналіз ринку
− відображення сповіщень про важливі події
− створення, редагування та видалення облікового запису
Основними потребами адміністратора є:  
	− можливість створення резервних копій даних системи 
− рєєстрація та вхід в акаунт;
Взаємодію кожної ролі користувачів з системою представлено на діаграмі прецедентів (див. рис. 1). 
 


Рисунок 1 – Діаграма прецедентів для серверної частини програми 
 
 
 
 
 
 
 
  	 



ПРОЄКТУВАННЯ БАЗИ ДАНИХ 
ER-модель (див. рис. 2). складається з 5 сутностей: User (Користувач), 
Sales (Продажі), Notification(Сповіщення), Role (Роль користувача), Permissions(Дозволи), Backups(Резервні копії). Було виділено наступні зв’язки: 
User - Role: 
- Багато до багатьох (N:N) 
- Кожен користувач може мати кілька ролей, і кожна роль може бути прив'язана до кількох користувачів.
2.  User - Sale: 
-Один до багатьох (1:N) 
-Один користувач може здійснити кілька продажів.
3.  User - Permissions: 
- Багато до багатьох (N:N) 
- Кожен користувач може мати кілька дозволів, і кожен дозвіл може бути наданий кільком користувачам.
4.  User - Notification: 
- Один до багатьох (1:N) 
- Один користувач може мати кілька сповіщень
5.  User - Backups: 
- Один до одного (1:1) 
- Один запис резервного копіювання може бути прив'язаний до одного користувача.

 
Рисунок 2 – ER-модель даних серверної частини 
 	








3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ 
	Модуль для управління конфігураціями у NestJS використовувався ConfigModule. Він дозволяє централізовано управляти конфігураціями додатку, що полегшує налаштування і розгортання в різних середовищах. 
	Модуль для перевірки стану здоров'я додатку це HealthModule. Він дозволяє легко перевіряти стан різних компонентів системи, таких як база даних, API і т.д. 
	PostgreSQL забезпечує високий рівень надійності, масштабованості і відповідності ACID. Вона підтримує складні запити і індексацію, що робить її відмінним вибором для проектів, які вимагають обробки великої кількості даних. 
	TypeORM дозволяє легко працювати з базою даних, використовуючи об'єкти. Він інтегрується з NestJS і дозволяє легко управляти базою даних через моделі.
	JWT дозволяє створювати безпечні токени для авторизації користувачів, які можна легко перевіряти на сервері.
	NestJS забезпечує модульну архітектуру, яка дозволяє легко організовувати код і розширювати функціональність додатку. Він також підтримує використання сучасних стандартів JavaScript і TypeScript.
	TypeScript допомагає виявляти помилки на етапі компіляції, що знижує кількість багів у коді. 
 
Рисунок 3 – UML діаграма розгортання серверної частини 
 	 
СПЕЦИФІКАЦІЯ REST 
REST API застосунку складається з 24 кінцевих точок. Специфікацію кожної з кінцевих точок наведено в таблиці 1. 
 
Таблиця 1 – Специфікація REST API 
Сутність
Метод
Посилання
Дія
Користувач
GET
/api/users/{id}
Отримати інформацію про користувача за ID
POST
/api/users
Створити нового користувача
PUT
/api/users/{id}
Оновити інформацію про користувача за ID
DELETE
/api/users/{id}
Видалити користувача за ID
Роль
GET
/api/roles/{id}
Отримати інформацію про роль за ID
POST
/api/roles
Створити нову роль
PUT
/api/roles/{id}
Оновити інформацію про роль за ID
DELETE
/api/roles/{id}
Видалити роль за ID
Дозволи
GET
/api/permissions/{id}
Отримати інформацію про дозвіл за ID
POST
/api/permissions
Створити новий дозвіл
PUT
/api/permissions/{id}
Оновити інформацію про дозвіл за ID
DELETE
/api/permissions/{id}
Видалити дозвіл за ID
Продажі
GET
/api/sales/{id}
Отримати інформацію про продаж за ID
POST
/api/sales
Створити новий запис про продаж
PUT
/api/sales/{id}
Оновити інформацію про продаж за ID
DELETE
/api/sales/{id}
Видалити запис про продаж за ID
Сповіщення
GET
/api/notifications/{id}
Отримати інформацію про сповіщення за ID
POST
/api/notifications
Створити нове сповіщення
PUT
/api/notifications/{id}
Оновити інформацію про сповіщення за ID
DELETE
/api/notifications/{id}
Видалити сповіщення за ID
Резервні копії
GET
/api/backups/{id}
Отримати інформацію про резервну копію за ID


POST
/api/backups
Створити нову резервну копію


PUT
/api/backups/{id}
Оновити інформацію про резервну копію за ID


DELETE
/api/backups/{id}
Видалити резервну копію за ID

 
 
 
 
 
ВИСНОВОК 
У ході виконання лабораторної роботи були отримані навички з проектування серверної частини програмної системи, розробки сценаріїв використання, діаграм розгортання та пакетів, проектуванні бази даних. 
